/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IGovernorINN {
  export type ProposalRequestStruct = {
    offchainID: BytesLike;
    startAt: BigNumberish;
    proposalType: BigNumberish;
    actionType: BigNumberish;
    description: string;
    data: BytesLike;
  };

  export type ProposalRequestStructOutput = [
    string,
    BigNumber,
    number,
    number,
    string,
    string
  ] & {
    offchainID: string;
    startAt: BigNumber;
    proposalType: number;
    actionType: number;
    description: string;
    data: string;
  };
}

export interface IGovernorINNInterface extends utils.Interface {
  functions: {
    "cancel(uint256,string)": FunctionFragment;
    "castVote(string,uint256,uint8)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "hashProposal(bytes32,bytes32,uint256,address,uint8,uint8,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "propose((bytes32,uint256,uint8,uint8,string,bytes))": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancel"
      | "castVote"
      | "execute"
      | "hasVoted"
      | "hashProposal"
      | "name"
      | "propose"
      | "state"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [IGovernorINN.ProposalRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ExitInvestmentProposalCreated(uint256,address,address,uint256,bytes32,bytes32,string,uint16)": EventFragment;
    "FreezeInvestmentProposalCreated(uint256,address,address,bytes32,bytes32)": EventFragment;
    "NewInvestmentProposalCreated(uint256,address,address,uint256,bytes32,bytes32,string,uint16)": EventFragment;
    "NewValidatorProposalCreated(uint256,address,address,bytes32,bytes32,string)": EventFragment;
    "ProposalCanceled(uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "UnfreezeInvestmentProposalCreated(uint256,address,address,bytes32,bytes32)": EventFragment;
    "VoteCast(address,uint256,uint8,string)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ExitInvestmentProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FreezeInvestmentProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewInvestmentProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewValidatorProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnfreezeInvestmentProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface ExitInvestmentProposalCreatedEventObject {
  proposalId: BigNumber;
  proposer: string;
  validatorEOA: string;
  tokenOffer: BigNumber;
  offchainID: string;
  description: string;
  startupName: string;
  sharedStake: number;
}
export type ExitInvestmentProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, string, string, number],
  ExitInvestmentProposalCreatedEventObject
>;

export type ExitInvestmentProposalCreatedEventFilter =
  TypedEventFilter<ExitInvestmentProposalCreatedEvent>;

export interface FreezeInvestmentProposalCreatedEventObject {
  proposalId: BigNumber;
  proposer: string;
  account: string;
  offchainID: string;
  description: string;
}
export type FreezeInvestmentProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string],
  FreezeInvestmentProposalCreatedEventObject
>;

export type FreezeInvestmentProposalCreatedEventFilter =
  TypedEventFilter<FreezeInvestmentProposalCreatedEvent>;

export interface NewInvestmentProposalCreatedEventObject {
  proposalID: BigNumber;
  proposer: string;
  startupEOA: string;
  tokenOffer: BigNumber;
  offchainID: string;
  description: string;
  startupName: string;
  sharedStake: number;
}
export type NewInvestmentProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, string, string, number],
  NewInvestmentProposalCreatedEventObject
>;

export type NewInvestmentProposalCreatedEventFilter =
  TypedEventFilter<NewInvestmentProposalCreatedEvent>;

export interface NewValidatorProposalCreatedEventObject {
  proposalID: BigNumber;
  proposer: string;
  validatorEOA: string;
  offchainID: string;
  description: string;
  validatorName: string;
}
export type NewValidatorProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string, string],
  NewValidatorProposalCreatedEventObject
>;

export type NewValidatorProposalCreatedEventFilter =
  TypedEventFilter<NewValidatorProposalCreatedEvent>;

export interface ProposalCanceledEventObject {
  proposalId: BigNumber;
  reason: string;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber, string],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface UnfreezeInvestmentProposalCreatedEventObject {
  proposalID: BigNumber;
  proposer: string;
  account: string;
  offchainID: string;
  description: string;
}
export type UnfreezeInvestmentProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string],
  UnfreezeInvestmentProposalCreatedEventObject
>;

export type UnfreezeInvestmentProposalCreatedEventFilter =
  TypedEventFilter<UnfreezeInvestmentProposalCreatedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: BigNumber;
  vote: number;
  reason: string;
}
export type VoteCastEvent = TypedEvent<
  [string, BigNumber, number, string],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface IGovernorINN extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGovernorINNInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancel(
      proposalId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      reason: string,
      proposalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasVoted(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      startedAt: BigNumberish,
      proposer: string,
      propsalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    propose(
      proposalRequest: IGovernorINN.ProposalRequestStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  cancel(
    proposalId: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    reason: string,
    proposalId: BigNumberish,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasVoted(
    proposalId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashProposal(
    offchainID: BytesLike,
    descriptionHash: BytesLike,
    startedAt: BigNumberish,
    proposer: string,
    propsalType: BigNumberish,
    actionType: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  propose(
    proposalRequest: IGovernorINN.ProposalRequestStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cancel(
      proposalId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    castVote(
      reason: string,
      proposalId: BigNumberish,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execute(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasVoted(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      startedAt: BigNumberish,
      proposer: string,
      propsalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    propose(
      proposalRequest: IGovernorINN.ProposalRequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ExitInvestmentProposalCreated(uint256,address,address,uint256,bytes32,bytes32,string,uint16)"(
      proposalId?: BigNumberish | null,
      proposer?: string | null,
      validatorEOA?: string | null,
      tokenOffer?: null,
      offchainID?: null,
      description?: null,
      startupName?: null,
      sharedStake?: null
    ): ExitInvestmentProposalCreatedEventFilter;
    ExitInvestmentProposalCreated(
      proposalId?: BigNumberish | null,
      proposer?: string | null,
      validatorEOA?: string | null,
      tokenOffer?: null,
      offchainID?: null,
      description?: null,
      startupName?: null,
      sharedStake?: null
    ): ExitInvestmentProposalCreatedEventFilter;

    "FreezeInvestmentProposalCreated(uint256,address,address,bytes32,bytes32)"(
      proposalId?: BigNumberish | null,
      proposer?: string | null,
      account?: string | null,
      offchainID?: null,
      description?: null
    ): FreezeInvestmentProposalCreatedEventFilter;
    FreezeInvestmentProposalCreated(
      proposalId?: BigNumberish | null,
      proposer?: string | null,
      account?: string | null,
      offchainID?: null,
      description?: null
    ): FreezeInvestmentProposalCreatedEventFilter;

    "NewInvestmentProposalCreated(uint256,address,address,uint256,bytes32,bytes32,string,uint16)"(
      proposalID?: BigNumberish | null,
      proposer?: string | null,
      startupEOA?: string | null,
      tokenOffer?: null,
      offchainID?: null,
      description?: null,
      startupName?: null,
      sharedStake?: null
    ): NewInvestmentProposalCreatedEventFilter;
    NewInvestmentProposalCreated(
      proposalID?: BigNumberish | null,
      proposer?: string | null,
      startupEOA?: string | null,
      tokenOffer?: null,
      offchainID?: null,
      description?: null,
      startupName?: null,
      sharedStake?: null
    ): NewInvestmentProposalCreatedEventFilter;

    "NewValidatorProposalCreated(uint256,address,address,bytes32,bytes32,string)"(
      proposalID?: BigNumberish | null,
      proposer?: string | null,
      validatorEOA?: string | null,
      offchainID?: null,
      description?: null,
      validatorName?: null
    ): NewValidatorProposalCreatedEventFilter;
    NewValidatorProposalCreated(
      proposalID?: BigNumberish | null,
      proposer?: string | null,
      validatorEOA?: string | null,
      offchainID?: null,
      description?: null,
      validatorName?: null
    ): NewValidatorProposalCreatedEventFilter;

    "ProposalCanceled(uint256,string)"(
      proposalId?: BigNumberish | null,
      reason?: null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(
      proposalId?: BigNumberish | null,
      reason?: null
    ): ProposalCanceledEventFilter;

    "ProposalExecuted(uint256)"(
      proposalId?: BigNumberish | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: BigNumberish | null
    ): ProposalExecutedEventFilter;

    "UnfreezeInvestmentProposalCreated(uint256,address,address,bytes32,bytes32)"(
      proposalID?: BigNumberish | null,
      proposer?: string | null,
      account?: string | null,
      offchainID?: null,
      description?: null
    ): UnfreezeInvestmentProposalCreatedEventFilter;
    UnfreezeInvestmentProposalCreated(
      proposalID?: BigNumberish | null,
      proposer?: string | null,
      account?: string | null,
      offchainID?: null,
      description?: null
    ): UnfreezeInvestmentProposalCreatedEventFilter;

    "VoteCast(address,uint256,uint8,string)"(
      voter?: string | null,
      proposalId?: BigNumberish | null,
      vote?: null,
      reason?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: string | null,
      proposalId?: BigNumberish | null,
      vote?: null,
      reason?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    cancel(
      proposalId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      reason: string,
      proposalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasVoted(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      startedAt: BigNumberish,
      proposer: string,
      propsalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      proposalRequest: IGovernorINN.ProposalRequestStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      proposalId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      reason: string,
      proposalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasVoted(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      startedAt: BigNumberish,
      proposer: string,
      propsalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propose(
      proposalRequest: IGovernorINN.ProposalRequestStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
