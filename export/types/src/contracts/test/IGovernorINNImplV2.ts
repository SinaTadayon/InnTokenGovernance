/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IGovernorINN {
  export type ProposalRequestStruct = {
    offchainID: BytesLike;
    proposalType: BigNumberish;
    actionType: BigNumberish;
    description: string;
    data: BytesLike;
  };

  export type ProposalRequestStructOutput = [
    string,
    number,
    number,
    string,
    string
  ] & {
    offchainID: string;
    proposalType: number;
    actionType: number;
    description: string;
    data: string;
  };
}

export interface IGovernorINNImplV2Interface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "CONSENSUS_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FREEZE_ACCOUNT_SIGNATURE()": FunctionFragment;
    "TRANSFER_SIGNATURE()": FunctionFragment;
    "UNFREEZE_ACCOUNT_SIGNATURE()": FunctionFragment;
    "cancel(bytes32,string)": FunctionFragment;
    "castVote(string,bytes32,uint8)": FunctionFragment;
    "castVoteAdmin(bytes32)": FunctionFragment;
    "commissionWallet()": FunctionFragment;
    "disableValidator(address)": FunctionFragment;
    "execute(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasVoted(bytes32,address)": FunctionFragment;
    "hashProposal(bytes32,bytes32,address,uint8,uint8,bytes)": FunctionFragment;
    "initialize(string,string,address)": FunctionFragment;
    "innTokenAddress()": FunctionFragment;
    "isAdminFirstVote()": FunctionFragment;
    "isMigrationEnabled()": FunctionFragment;
    "isStartup(address)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "name()": FunctionFragment;
    "oldVersion()": FunctionFragment;
    "oracle()": FunctionFragment;
    "propose((bytes32,uint8,uint8,string,bytes),bytes)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reservedWallet()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setMigration(bool)": FunctionFragment;
    "setVotingDelay(uint256)": FunctionFragment;
    "setVotingPeriod(uint256)": FunctionFragment;
    "startupCount()": FunctionFragment;
    "state(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validatorCount()": FunctionFragment;
    "version()": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "CONSENSUS_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "FREEZE_ACCOUNT_SIGNATURE"
      | "TRANSFER_SIGNATURE"
      | "UNFREEZE_ACCOUNT_SIGNATURE"
      | "cancel"
      | "castVote"
      | "castVoteAdmin"
      | "commissionWallet"
      | "disableValidator"
      | "execute"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "hasVoted"
      | "hashProposal"
      | "initialize"
      | "innTokenAddress"
      | "isAdminFirstVote"
      | "isMigrationEnabled"
      | "isStartup"
      | "isValidator"
      | "name"
      | "oldVersion"
      | "oracle"
      | "propose"
      | "proxiableUUID"
      | "renounceRole"
      | "reservedWallet"
      | "revokeRole"
      | "setMigration"
      | "setVotingDelay"
      | "setVotingPeriod"
      | "startupCount"
      | "state"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "validatorCount"
      | "version"
      | "votingDelay"
      | "votingPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSENSUS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FREEZE_ACCOUNT_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNFREEZE_ACCOUNT_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableValidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [
      BytesLike,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "innTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAdminFirstVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMigrationEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isStartup", values: [string]): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oldVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [IGovernorINN.ProposalRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reservedWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigration",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startupCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONSENSUS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FREEZE_ACCOUNT_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNFREEZE_ACCOUNT_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "innTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdminFirstVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMigrationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStartup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oldVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservedWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startupCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ExitInvestmentProposalCreated(bytes32,address,address,uint256,bytes32,bytes32,string,uint16)": EventFragment;
    "FreezeInvestmentProposalCreated(bytes32,address,address,bytes32,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewInvestmentProposalCreated(bytes32,address,address,uint256,bytes32,bytes32,string,uint16)": EventFragment;
    "NewValidatorProposalCreated(bytes32,address,address,bytes32,bytes32,string)": EventFragment;
    "ProposalCanceled(bytes32,string)": EventFragment;
    "ProposalExecuted(bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "UnfreezeInvestmentProposalCreated(bytes32,address,address,bytes32,bytes32)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VoteCast(address,bytes32,uint8,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExitInvestmentProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FreezeInvestmentProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewInvestmentProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewValidatorProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnfreezeInvestmentProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ExitInvestmentProposalCreatedEventObject {
  proposalId: string;
  proposer: string;
  validatorEOA: string;
  tokenOffer: BigNumber;
  offchainID: string;
  description: string;
  startupName: string;
  sharedStake: number;
}
export type ExitInvestmentProposalCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, string, string, string, number],
  ExitInvestmentProposalCreatedEventObject
>;

export type ExitInvestmentProposalCreatedEventFilter =
  TypedEventFilter<ExitInvestmentProposalCreatedEvent>;

export interface FreezeInvestmentProposalCreatedEventObject {
  proposalId: string;
  proposer: string;
  account: string;
  offchainID: string;
  description: string;
}
export type FreezeInvestmentProposalCreatedEvent = TypedEvent<
  [string, string, string, string, string],
  FreezeInvestmentProposalCreatedEventObject
>;

export type FreezeInvestmentProposalCreatedEventFilter =
  TypedEventFilter<FreezeInvestmentProposalCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewInvestmentProposalCreatedEventObject {
  proposalID: string;
  proposer: string;
  startupEOA: string;
  tokenOffer: BigNumber;
  offchainID: string;
  description: string;
  startupName: string;
  sharedStake: number;
}
export type NewInvestmentProposalCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, string, string, string, number],
  NewInvestmentProposalCreatedEventObject
>;

export type NewInvestmentProposalCreatedEventFilter =
  TypedEventFilter<NewInvestmentProposalCreatedEvent>;

export interface NewValidatorProposalCreatedEventObject {
  proposalID: string;
  proposer: string;
  validatorEOA: string;
  offchainID: string;
  description: string;
  validatorName: string;
}
export type NewValidatorProposalCreatedEvent = TypedEvent<
  [string, string, string, string, string, string],
  NewValidatorProposalCreatedEventObject
>;

export type NewValidatorProposalCreatedEventFilter =
  TypedEventFilter<NewValidatorProposalCreatedEvent>;

export interface ProposalCanceledEventObject {
  proposalId: string;
  reason: string;
}
export type ProposalCanceledEvent = TypedEvent<
  [string, string],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalExecutedEventObject {
  proposalId: string;
}
export type ProposalExecutedEvent = TypedEvent<
  [string],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnfreezeInvestmentProposalCreatedEventObject {
  proposalID: string;
  proposer: string;
  account: string;
  offchainID: string;
  description: string;
}
export type UnfreezeInvestmentProposalCreatedEvent = TypedEvent<
  [string, string, string, string, string],
  UnfreezeInvestmentProposalCreatedEventObject
>;

export type UnfreezeInvestmentProposalCreatedEventFilter =
  TypedEventFilter<UnfreezeInvestmentProposalCreatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: string;
  vote: number;
  reason: string;
}
export type VoteCastEvent = TypedEvent<
  [string, string, number, string],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface IGovernorINNImplV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGovernorINNImplV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    CONSENSUS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<[string]>;

    TRANSFER_SIGNATURE(overrides?: CallOverrides): Promise<[string]>;

    UNFREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVoteAdmin(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    commissionWallet(overrides?: CallOverrides): Promise<[string]>;

    disableValidator(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasVoted(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      domainName: string,
      domainVersion: string,
      oracleIns: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    innTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    isAdminFirstVote(overrides?: CallOverrides): Promise<[boolean]>;

    isMigrationEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isStartup(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isValidator(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    oldVersion(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    propose(
      request: IGovernorINN.ProposalRequestStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservedWallet(overrides?: CallOverrides): Promise<[string]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigration(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotingDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotingPeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startupCount(overrides?: CallOverrides): Promise<[number]>;

    state(proposalId: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validatorCount(overrides?: CallOverrides): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    votingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  CONSENSUS_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<string>;

  TRANSFER_SIGNATURE(overrides?: CallOverrides): Promise<string>;

  UNFREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<string>;

  cancel(
    proposalId: BytesLike,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    reason: string,
    proposalId: BytesLike,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVoteAdmin(
    proposalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  commissionWallet(overrides?: CallOverrides): Promise<string>;

  disableValidator(
    validator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasVoted(
    proposalId: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashProposal(
    offchainID: BytesLike,
    descriptionHash: BytesLike,
    proposer: string,
    proposalType: BigNumberish,
    actionType: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    domainName: string,
    domainVersion: string,
    oracleIns: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  innTokenAddress(overrides?: CallOverrides): Promise<string>;

  isAdminFirstVote(overrides?: CallOverrides): Promise<boolean>;

  isMigrationEnabled(overrides?: CallOverrides): Promise<boolean>;

  isStartup(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isValidator(addr: string, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  oldVersion(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  propose(
    request: IGovernorINN.ProposalRequestStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservedWallet(overrides?: CallOverrides): Promise<string>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigration(
    migration: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotingDelay(
    delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotingPeriod(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startupCount(overrides?: CallOverrides): Promise<number>;

  state(proposalId: BytesLike, overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validatorCount(overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<string>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    CONSENSUS_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<string>;

    TRANSFER_SIGNATURE(overrides?: CallOverrides): Promise<string>;

    UNFREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<string>;

    cancel(
      proposalId: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    castVote(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    castVoteAdmin(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commissionWallet(overrides?: CallOverrides): Promise<string>;

    disableValidator(
      validator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(proposalId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasVoted(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      domainName: string,
      domainVersion: string,
      oracleIns: string,
      overrides?: CallOverrides
    ): Promise<void>;

    innTokenAddress(overrides?: CallOverrides): Promise<string>;

    isAdminFirstVote(overrides?: CallOverrides): Promise<boolean>;

    isMigrationEnabled(overrides?: CallOverrides): Promise<boolean>;

    isStartup(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isValidator(addr: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    oldVersion(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    propose(
      request: IGovernorINN.ProposalRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reservedWallet(overrides?: CallOverrides): Promise<string>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigration(migration: boolean, overrides?: CallOverrides): Promise<void>;

    setVotingDelay(
      delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startupCount(overrides?: CallOverrides): Promise<number>;

    state(proposalId: BytesLike, overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorCount(overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<string>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "ExitInvestmentProposalCreated(bytes32,address,address,uint256,bytes32,bytes32,string,uint16)"(
      proposalId?: BytesLike | null,
      proposer?: string | null,
      validatorEOA?: string | null,
      tokenOffer?: null,
      offchainID?: null,
      description?: null,
      startupName?: null,
      sharedStake?: null
    ): ExitInvestmentProposalCreatedEventFilter;
    ExitInvestmentProposalCreated(
      proposalId?: BytesLike | null,
      proposer?: string | null,
      validatorEOA?: string | null,
      tokenOffer?: null,
      offchainID?: null,
      description?: null,
      startupName?: null,
      sharedStake?: null
    ): ExitInvestmentProposalCreatedEventFilter;

    "FreezeInvestmentProposalCreated(bytes32,address,address,bytes32,bytes32)"(
      proposalId?: BytesLike | null,
      proposer?: string | null,
      account?: string | null,
      offchainID?: null,
      description?: null
    ): FreezeInvestmentProposalCreatedEventFilter;
    FreezeInvestmentProposalCreated(
      proposalId?: BytesLike | null,
      proposer?: string | null,
      account?: string | null,
      offchainID?: null,
      description?: null
    ): FreezeInvestmentProposalCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewInvestmentProposalCreated(bytes32,address,address,uint256,bytes32,bytes32,string,uint16)"(
      proposalID?: BytesLike | null,
      proposer?: string | null,
      startupEOA?: string | null,
      tokenOffer?: null,
      offchainID?: null,
      description?: null,
      startupName?: null,
      sharedStake?: null
    ): NewInvestmentProposalCreatedEventFilter;
    NewInvestmentProposalCreated(
      proposalID?: BytesLike | null,
      proposer?: string | null,
      startupEOA?: string | null,
      tokenOffer?: null,
      offchainID?: null,
      description?: null,
      startupName?: null,
      sharedStake?: null
    ): NewInvestmentProposalCreatedEventFilter;

    "NewValidatorProposalCreated(bytes32,address,address,bytes32,bytes32,string)"(
      proposalID?: BytesLike | null,
      proposer?: string | null,
      validatorEOA?: string | null,
      offchainID?: null,
      description?: null,
      validatorName?: null
    ): NewValidatorProposalCreatedEventFilter;
    NewValidatorProposalCreated(
      proposalID?: BytesLike | null,
      proposer?: string | null,
      validatorEOA?: string | null,
      offchainID?: null,
      description?: null,
      validatorName?: null
    ): NewValidatorProposalCreatedEventFilter;

    "ProposalCanceled(bytes32,string)"(
      proposalId?: BytesLike | null,
      reason?: null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(
      proposalId?: BytesLike | null,
      reason?: null
    ): ProposalCanceledEventFilter;

    "ProposalExecuted(bytes32)"(
      proposalId?: BytesLike | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: BytesLike | null
    ): ProposalExecutedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "UnfreezeInvestmentProposalCreated(bytes32,address,address,bytes32,bytes32)"(
      proposalID?: BytesLike | null,
      proposer?: string | null,
      account?: string | null,
      offchainID?: null,
      description?: null
    ): UnfreezeInvestmentProposalCreatedEventFilter;
    UnfreezeInvestmentProposalCreated(
      proposalID?: BytesLike | null,
      proposer?: string | null,
      account?: string | null,
      offchainID?: null,
      description?: null
    ): UnfreezeInvestmentProposalCreatedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "VoteCast(address,bytes32,uint8,string)"(
      voter?: string | null,
      proposalId?: BytesLike | null,
      vote?: null,
      reason?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: string | null,
      proposalId?: BytesLike | null,
      vote?: null,
      reason?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    CONSENSUS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_SIGNATURE(overrides?: CallOverrides): Promise<BigNumber>;

    UNFREEZE_ACCOUNT_SIGNATURE(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVoteAdmin(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commissionWallet(overrides?: CallOverrides): Promise<BigNumber>;

    disableValidator(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      domainName: string,
      domainVersion: string,
      oracleIns: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    innTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isAdminFirstVote(overrides?: CallOverrides): Promise<BigNumber>;

    isMigrationEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isStartup(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isValidator(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    oldVersion(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      request: IGovernorINN.ProposalRequestStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservedWallet(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigration(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotingDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotingPeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startupCount(overrides?: CallOverrides): Promise<BigNumber>;

    state(proposalId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONSENSUS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FREEZE_ACCOUNT_SIGNATURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRANSFER_SIGNATURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNFREEZE_ACCOUNT_SIGNATURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      proposalId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      reason: string,
      proposalId: BytesLike,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVoteAdmin(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commissionWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableValidator(
      validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      proposalId: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashProposal(
      offchainID: BytesLike,
      descriptionHash: BytesLike,
      proposer: string,
      proposalType: BigNumberish,
      actionType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      domainName: string,
      domainVersion: string,
      oracleIns: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    innTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdminFirstVote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMigrationEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStartup(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propose(
      request: IGovernorINN.ProposalRequestStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservedWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigration(
      migration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotingDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotingPeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startupCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
